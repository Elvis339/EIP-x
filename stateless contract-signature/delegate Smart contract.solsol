// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract DelegatedApproval {
    address public owner;
    mapping(address => bool) public approvedDelegates;

    // State variables to track approved actions
    uint256 public approvedActionCount;
    mapping(address => uint256) public approvedActionsByDelegate;

    // Address of the ERC20 token contract
    address public tokenContractAddress;
    
    // Event to track token transfers
    event TokensTransferred(address indexed _from, address indexed _to, uint256 _amount);

    constructor(address _tokenContractAddress) {
        owner = msg.sender;
        tokenContractAddress = _tokenContractAddress;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function.");
        _;
    }

    modifier onlyOwnerOrDelegate() {
        require(msg.sender == owner || approvedDelegates[msg.sender], "Only the owner or approved delegate can call this function.");
        _;
    }

    // Add an address as an approved delegate
    function addApprovedDelegate(address _delegate) external onlyOwner {
        approvedDelegates[_delegate] = true;
    }

    // Remove an address from approved delegates
    function removeApprovedDelegate(address _delegate) external onlyOwner {
        approvedDelegates[_delegate] = false;
    }

    // Function to perform some action that requires signature approval
    function performAction() external onlyOwnerOrDelegate {
        // Add the logic here that you want to perform when the signature is valid.
        // For example, you can update state variables or execute some business logic.
        // In this example, we will update the approvedActionCount and transfer tokens.

        approvedActionCount++;
        approvedActionsByDelegate[msg.sender]++;

        // Assuming the contract holds ERC20 tokens
        uint256 tokenAmountToTransfer = 100; // Replace this with the desired token amount
        MyToken tokenContract = MyToken(tokenContractAddress);
        require(tokenContract.balanceOf(address(this)) >= tokenAmountToTransfer, "Insufficient balance in the contract.");
        require(tokenContract.transfer(msg.sender, tokenAmountToTransfer), "Token transfer failed.");

        emit TokensTransferred(address(this), msg.sender, tokenAmountToTransfer);
    }
}
